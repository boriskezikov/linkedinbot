plugins {
    id 'org.springframework.boot' version '2.6.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'java-library'
    id "org.liquibase.gradle" version "2.0.4"
}

group = 'com.tr'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.10.3'
    implementation 'org.telegram:telegrambots-spring-boot-starter:5.7.1'

    implementation 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.liquibase:liquibase-core'

    implementation 'org.telegram:telegrambotsextensions:5.7.1'
    implementation 'org.postgresql:postgresql:42.3.3'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-55:3.1.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    def outputDir = reports.junitXml.outputLocation
    jvmArgumentProviders << ({
        [
                "-Djunit.platform.reporting.open.xml.enabled=true",
                "-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}"
        ]
    } as CommandLineArgumentProvider)
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.tr.linkedinbot.LinkedinbotApplication'
        )
    }
}

springBoot {
    mainClass = 'com.tr.linkedinbot.LinkedinbotApplication'
}